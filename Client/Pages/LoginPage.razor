@layout LoginLayout
@page "/"
@inject HttpClient Http;
@using Client.Services;
@inject NavigationManager NavigationManager
@inject Blazored.SessionStorage.ISessionStorageService sessionStorage;


<div class="header">BAUNES FESTIVAL</div>

<!--Form til login side -->
<div class="container">
    <div class="box">
        <h2>Login</h2>
        <form>
            <EditForm EditContext="@aEditContext" class="row p-3" OnValidSubmit="@HandleValidSubmit">
                <DataAnnotationsValidator />
                <ValidationSummary />

                <!-- Hvis brugernavn og kodeord ikke passer sammen skriv besked: oplysninger passer ikke -->
                <ul class="validation-errors" style="display: @(isMatchFound ? "none" : "block")">
                    <li class="validation-message">Oplysninger matcher ikke</li>
                </ul>

                <div>
                    <label for="email"></label>
                    <InputText id="email" placeholder="E-mail:" @bind-Value="userItem.email" class="form-control" />
                </div>

                <div>
                    <label for="password"></label>
                    <InputText id="password" type="password" placeholder="Password:" @bind-Value="userItem.password" class="form-control" />
                </div>

                <button type="submit" class="btn btn-primary">Login</button>
            </EditForm>
        </form>
    </div>
</div>


@code {

    //Angiver om der er et match mellem brugeroplysningerne
    public bool isMatchFound = true;

    // Ny instans af UserDTO
    private UserDTO userItem = new UserDTO();

    //Array til opbevaring af brugerdata
    private UserDTO[]? userList = new UserDTO[0];

    //Tjeneste til vores service
    [Inject]
    private IUserService uService { get; set; }

    protected override async Task OnInitializedAsync()
    {
        // Henter brugerdata fra IUserService og gemmer dem i userList-arrayet
        userList = (await uService.getUsers()).ToArray();

        //Sætter isLoggedIn i session storage til false
        await sessionStorage.SetItemAsync("isLoggedIn", false);
    }

    // EditContext-objekt til validering af formularfelter
    private EditContext aEditContext;


    protected override void OnInitialized()
    {
        aEditContext = new EditContext(userItem);
    }

    private async Task Login()
    {
        Console.WriteLine(userList.ToArray().ToString());
        //Itererer gennem userList for at sammenligne brugeroplysningerne
        foreach (var user in userList)
        {
            if (user.email == userItem.email && user.password == userItem.password)
            {
                // Gemmer brugerens id og rolle_id i session storage
                await sessionStorage.SetItemAsync("userId", user.user_id);
                await sessionStorage.SetItemAsync("userRoleId", user.role_id);

                // Sætter isLoggedIn i session storage til true
                await sessionStorage.SetItemAsync("isLoggedIn", true);

                // Navigerer til "/userinfo/" siden
                NavigationManager.NavigateTo($"/userinfo/", forceLoad: true);

                //Der er fundet et match
                isMatchFound = true;
                break;
            }
            else
            {
                //Der er IKKE fundet et match: "Oplysninger matcher ikke"
                isMatchFound = false;
            }
        }
    }

    public async Task HandleValidSubmit()
    {
        await Login();
    }
}