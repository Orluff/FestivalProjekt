@page "/users"
@using Client.Services;
@inject HttpClient Http;
@inject NavigationManager NavigationManager
@inject Blazored.SessionStorage.ISessionStorageService sessionStorage;

<div class="table-header">Bruger oversigt</div>

<!-- Table over alle brugere-->
<table class="styled-table">
    <thead>
        <tr>
            <th>Navn</th>
            <th>Efternavn</th>
            <th>Adresse</th>
            <th>Email</th>
            <th>Telefon</th>
            <th>Fødselsdato</th>
            <th>Rolle</th>
        </tr>
    </thead>

    <tbody>
        @foreach (var user in userList)
        {
            <!-- Hent rollen for den pågældende bruger -->
            var rol = roleList.FirstOrDefault(r => r.role_id == user.role_id);

            if (rol != null)
            {
                <tr class="active-row">
                    <td>@user.name</td>
                    <td>@user.lastName</td>
                    <td>@user.address</td>
                    <td>@user.email</td>
                    <td>@user.telephone</td>
                    <td>@user.birthDate.ToString("dd-MM-yyyy")</td>
                    <td>@rol.roleName</td>
                    <td>
                        <button type="button" class="btn btn-link" @onclick="() => RemoveUser(user)"><span class="oi oi-trash"></span></button>
                    </td>
                </tr>
            }
        }
    </tbody>
</table>


@code {

    //Gem bruger id
    public int userId { get; set; }

    //Egenskaber
    private UserDTO[]? userList = new UserDTO[0];
    private UserDTO user = new UserDTO();
    private RoleDTO roleItem = new RoleDTO();
    private RoleDTO[]? roleList = new RoleDTO[0];

    //Tjenester til vores services
    [Inject]
    private IUserService mService { get; set; }
    [Inject]
    private IRoleService rService { get; set; }

    protected override async Task OnInitializedAsync()
    {
        // Indlæs bruger-id fra session storage
        userId = await sessionStorage.GetItemAsync<int>("userId");
        if (userId == 0)
        {
            //Er bruger-id ikke tilgængeligt, omdiriger til forsiden
            NavigationManager.NavigateTo($"/");
        }

        try
        {
            // Hent bruger- og rollelisterne fra serveren
            userList = (await mService.getUsers()).ToArray();
            roleList = (await rService.getRole()).ToArray();
        }
        catch (Exception ex)
        {
            Console.WriteLine(ex);
        }
    }

    private EditContext aEditContext;

    protected override void OnInitialized()
    {
        aEditContext = new EditContext(user);
        aEditContext = new EditContext(roleItem);
    }

    private async Task RemoveUser(UserDTO id)
    {
        await mService.RemoveUser(id);

        //Sørger for at genindlæse UI'en så vagt listen opdateres med det samme
        userList = (await mService.getUsers()).ToArray();
        StateHasChanged();
    }
}