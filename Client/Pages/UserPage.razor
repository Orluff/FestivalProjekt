@page "/users"
@using Client.Services;
@inject HttpClient Http;
@inject NavigationManager NavigationManager
@inject Blazored.SessionStorage.ISessionStorageService sessionStorage;

<h1 class="mb-3 mt-3">User Liste</h1>
<table class="table table-striped">
    <thead>
        <tr>
            <th>Name</th>
            <th>Lastname</th>
            <th>Address</th>
            <th>Email</th>
            <th>Telephone</th>
            <th>Birthdate</th>
            <th>Rolle</th>
        </tr>
    </thead>
    <tbody>
        @foreach (var user in userList)
            {
                var rol = roleList.FirstOrDefault(r => r.role_id == user.role_id);
                if (rol != null)
                {
                <tr>
                <td>@user.name</td>
                <td>@user.lastName</td>
                <td>@user.address</td>
                <td>@user.email</td>
                <td>@user.telephone</td>
                <td>@user.birthDate.ToString("yyyy-MM-dd")</td>
                <td>@rol.roleName</td>
                <td><button type="button" @onclick="() => RemoveUser(user)">X</button></td>
                </tr>
                }
            }
    </tbody>
</table>


@code {
    public int userId { get; set; }


    private UserDTO[]? userList = new UserDTO[0];

    private RoleDTO[]? roleList = new RoleDTO[0];

    [Inject]
    private IUserService mService { get; set; }

    [Inject]
    private IRoleService rService { get; set; }

    protected override async Task OnInitializedAsync()
    {
        userId = await sessionStorage.GetItemAsync<int>("userId");
        if (userId == 0)
        {
            NavigationManager.NavigateTo($"/");
        }

        try
        {
            userList = (await mService.getUsers()).ToArray();
            roleList = (await rService.getRole()).ToArray();
        }
        catch (Exception ex)
        {
            Console.WriteLine(ex);
        }
    }

    private UserDTO user = new UserDTO();

    private RoleDTO roleItem = new RoleDTO();

    private EditContext aEditContext;

    protected override void OnInitialized()
    {
        aEditContext = new EditContext(user);
        aEditContext = new EditContext(roleItem);
    }

    private async Task RemoveUser(UserDTO id)
    {
        await mService.RemoveUser(id);

        //Sørger for at genindlæse UI'en så vagt listen opdateres med det samme.
        userList = (await mService.getUsers()).ToArray();
        StateHasChanged();
    } 
}