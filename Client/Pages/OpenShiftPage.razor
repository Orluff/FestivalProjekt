@page "/openshifts"
@using Client.Services;
@inject HttpClient Http;
@inject NavigationManager NavigationManager
@inject Blazored.SessionStorage.ISessionStorageService sessionStorage;
<!-- Hvis vagt allerede er valgt af denne bruger, pop up besked: Du har allerede valgt denne vagt -->
<div class="modal" style='display: @(showModal ? "block" : "none")'>
    <div class="modal-dialog">
        <div class="modal-content">
            <div class="modal-header">
                <h5 class="modal-title">Fejl</h5>
            </div>
            <div class="modal-body">
                Du har allerede valgt denne vagt.
            </div>
            <div class="modal-footer">
                <button type="button" class="btn btn-primary" @onclick='() => showModal = false'>OK</button>
            </div>
        </div>
    </div>
</div>

<!-- Hvis man vælger en vagt, kommer den pop up besked -->
<div class="modal" style='display: @(showConfirmation ? "block" : "none")'>
    <div class="modal-dialog">
        <div class="modal-content">
            <div class="modal-header">
                <h5 class="modal-title">Bekræftelse</h5>
            </div>
            <div class="modal-body">
                Du har taget vagten.
            </div>
        </div>
    </div>
</div>

<div class="table-header">Vagter</div>

<!-- Table over vagter som brugeren kan vælge-->
<table class="styled-table">
    <thead>
        <tr>
            <th>Kategori</th>
            <th>Start Tidspunkt</th>
            <th>Slut Tidspunkt</th>
            <th>Timer</th>
            <th>Beskrivelse</th>
            <th>Ledige Pladser</th>
            <th>Vælg Vagt</th>
        </tr>

        <!-- Kategori dropdown-->
        <!-- Når værdien i dropdown-menuen ændres, opdateres værdien af selectedCategory automatisk.-->

         <td>
        <label>Vælg kategori: </label>
        <select @bind="selectedCategory" class="category">
            <option value="">Alle kategorier</option>
                @foreach (var category in catList)
                {
                <option value="@category.category_id">@category.categoryName</option>
                }
        </select>
        </td>
    </thead>

    <tbody>
        @foreach (var shift in shiftList)
        {
            <!-- hvis der er pladser tilbage på vagten (dvs. 1 eller flere) -->
            if (shift.spots > 0)
            {
                <!-- Hent kategorien for den pågældende vagt -->
                var category = catList.FirstOrDefault(c => c.category_id == shift.category_id);
                if (category != null && (string.IsNullOrEmpty(selectedCategory) || category.category_id.ToString() == selectedCategory))
                {
                    <tr>
                        <td>@category.categoryName</td>
                        <td>@shift.startDateTime</td>
                        <td>@shift.endDateTime</td>
                        <td>@shift.duration</td>
                        <td>@category.description</td>
                        <td>@shift.spots</td>
                        <td><button type="button" class="btn btn-link" @onclick="() => TakeShift(userShift, shift)"><span class="oi oi-check"></span></button></td>
                    </tr>
                }
            }
        }
    </tbody>
</table>

@code {

    //Gem bruger id
    public int userId { get; set; }

    //Tom string til valg af category
    private string selectedCategory;


    //Bruges til vise modal (Div øverst på siden)
    private bool showModal = false;
    private bool showConfirmation = false;

    //Dictionary til at mappe sorteringsmetoder til handlinger
    Dictionary<string, Action> selectedSortDictionary;

    //Arrays af DTO-objekter, der kan være null
    private ShiftDTO[]? shiftList = new ShiftDTO[0];
    private UserShiftDTO[]? userShiftList = new UserShiftDTO[0];
    private ShiftCategoryDTO[]? catList = new ShiftCategoryDTO[0];

    //Tjenester til vores services
    [Inject]
    private IShiftService mService { get; set; }
    [Inject]
    private IUserShiftService uService { get; set; }
    [Inject]
    private ICategoryService cService { get; set; }


    protected override async Task OnInitializedAsync()
    {
        // Indlæs bruger-id fra session storage
        userId = await sessionStorage.GetItemAsync<int>("userId");
        if (userId == 0)
        {
            //Er bruger-id ikke tilgængeligt, omdiriger til forsiden
            NavigationManager.NavigateTo($"/");
        }

        try
        {
            // Hent vagt-, brugervagt- og kategorilisterne fra serveren
            shiftList = (await mService.getShifts()).ToArray();
            userShiftList = (await uService.GetUserShifts()).ToArray();
            catList = (await cService.getCategories()).ToArray();

            selectedSortDictionary = new Dictionary<string, Action>
            {
                //Sorter vagter efter prioritet, antal pladser tilbage og næstkommende starttidspunkt
                ["priority"] = () => shiftList = shiftList.OrderBy(s => s.priority ? 0 : 1).ToArray()
            };

            selectedSortDictionary["priority"]();
        }
        catch (Exception ex)
        {
            Console.WriteLine(ex);
        }
    }

    //Egenskaber
    private ShiftDTO shift = new ShiftDTO();
    private UserShiftDTO userShift = new UserShiftDTO();
    private ShiftCategoryDTO category = new ShiftCategoryDTO();


    private EditContext aEditContext;

    protected override void OnInitialized()
    {
        aEditContext = new EditContext(shift);
        aEditContext = new EditContext(userShift);
        aEditContext = new EditContext(category);
    }

    private async Task TakeShift(UserShiftDTO userShift, ShiftDTO shift)
    {
        bool isShiftSelected = false;

        //Hvis vagten vælges af brugeren og ikke allerede er i brugerens vagtplan stopper forloopet og resten af Task'en køres
        foreach (var user in userShiftList)
        {
            if (user.shift_id == shift.shift_id && user.user_id == userId)
            {
                isShiftSelected = true;
                break;
            }
        }

        if (isShiftSelected)
        {
            // Vis modalen (error pop-up) ved at sætte den til true
            showModal = true;
            // Stopper udførelsen af resten af TakeShift metoden
            return;
        }

        // Indstil showConfirmation til true
        showConfirmation = true;

        //shift_id og user_id tildeles userShift
        userShift.shift_id = shift.shift_id;
        userShift.user_id = userId;

        //Kald metoden til at tage vagten med brugerens skift og det angivne skift
        await uService.TakeShift(userShift, shift);
        await mService.RemoveSpot(shift);

        //Sørger for at genindlæse UI'en så vagt listen opdateres med det samme.
        userShiftList = (await uService.GetUserShifts()).ToArray();
        shiftList = (await mService.getShifts()).ToArray();
        StateHasChanged();

        // Start en tidsforsinkelse - i millisekunder
        await Task.Delay(1500);

        // Nulstil showConfirmation
        showConfirmation = false;
    }
}