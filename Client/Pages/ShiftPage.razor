@page "/shifts"
@using Client.Services;
@using Syncfusion.Blazor
@using Syncfusion.Blazor.DropDowns
@inject HttpClient Http;

<h1 class="mb-3 mt-3">Vagt Liste</h1>

<label>Sorter efter: </label>

<select @bind="SelectedSort">
    <option value="priority">Prioritet</option>
    <option value="pladser">Antal pladser tilbage</option>
    <option value="tidspunkt">Næstkommende vagter</option>
</select>

<table class="table table-striped">
    <thead>
        <tr>
            <th>Vagt ID</th>
            <th>Start Tidspunkt</th>
            <th>Slut Tidspunkt</th>
            <th>Længde</th>
            <th>Kategori ID</th>
            <th>Prioritet</th>
            <th>Pladser</th>
        </tr>
    </thead>
    <tbody>
        @foreach (var shift in shiftList)
            {
            <tr>
                <td>@shift.shift_id</td>
                <td>@shift.startDateTime</td>
                <td>@shift.endDateTime</td>
                <td>@shift.duration</td>
                <td>@shift.category_id</td>
                <td>@shift.priority</td>
                <td>@shift.spots</td>
                <td><button type="button" @onclick="() => RemoveShift(shift)">X</button></td>
            </tr>

            }
    </tbody>

</table>

@code {

    private string selectedSort;

        public string SelectedSort
        {
            get { return selectedSort; }
            set
            {
                selectedSort = value;
                selectedSortDictionary[selectedSort]();
            }
        }

        Dictionary<string, Action> selectedSortDictionary;

        private ShiftDTO[]? shiftList = new ShiftDTO[0];

        [Inject]
        private IShiftService mService { get; set; }

        protected override async Task OnInitializedAsync()
        {
            shiftList = (await mService.getShifts()).ToArray();
            selectedSortDictionary = new Dictionary<string, Action>
            {
                ["priority"] = () => shiftList = shiftList.OrderBy(s => s.priority ? 0 : 1).ToArray(),
                ["pladser"] = () => shiftList = shiftList.OrderByDescending(s => s.spots).ToArray(),
                ["tidspunkt"] = () => shiftList = shiftList.OrderBy(s => s.startDateTime).ToArray()
            };
        }

        private ShiftDTO shift = new ShiftDTO();

        private EditContext aEditContext;

        protected override void OnInitialized()
        {
            aEditContext = new EditContext(shift);
        }

        private async Task RemoveShift(ShiftDTO id)
        {
            await mService.RemoveShift(id);

            //Sørger for at genindlæse UI'en så vagt listen opdateres med det samme.
            shiftList = (await mService.getShifts()).ToArray();
            StateHasChanged();
        }

    }