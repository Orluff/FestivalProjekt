@page "/shifts"
@using Client.Services;
@inject HttpClient Http;
@inject NavigationManager NavigationManager
@inject Blazored.SessionStorage.ISessionStorageService sessionStorage;

<h1 class="mb-3 mt-3">Vagt Liste</h1>

<label>Sorter efter: </label>

<select @bind="SelectedSort">
    <option value="priority">Prioritet</option>
    <option value="pladser">Antal pladser tilbage</option>
    <option value="tidspunkt">Næstkommende vagter</option>
</select>

<table class="table table-striped">
    <thead>
        <tr>
            <th>Kategori</th>
            <th>Område</th>
            <th>Beskrivelse</th>
            <th>Start Tidspunkt</th>
            <th>Slut Tidspunkt</th>
            <th>Længde</th>
            <th>Prioritet</th>
            <th>Pladser</th>
            <th></th>
        </tr>
    </thead>
    <tbody>
        @foreach (var shift in shiftList)
        {
            var category = catList.FirstOrDefault(c => c.category_id == shift.category_id);
            if (category != null)
            {
                <tr>
                    <td>@category.categoryName</td>
                    <td>@category.area</td>
                    <td>@category.description</td>
                    <td>@shift.startDateTime</td>
                    <td>@shift.endDateTime</td>
                    <td>@shift.duration timer</td>
                    <td>@shift.priority</td>
                    <td>@shift.spots</td>
                    <td>
                        <button type="button" @onclick="() => RemoveShift(shift)">X</button>
                    </td>
                </tr>
            }
        }
    </tbody>
</table>

@code {

    private string selectedSort;

    public string SelectedSort
    {
        get { return selectedSort; }
        set
        {
            selectedSort = value;
            selectedSortDictionary[selectedSort](); 
        }
    }

    Dictionary<string, Action> selectedSortDictionary;

    public int userId { get; set; }

    private ShiftDTO[]? shiftList = new ShiftDTO[0];

    private ShiftCategoryDTO[]? catList = new ShiftCategoryDTO[0];


    [Inject]
    private IShiftService mService { get; set; }

    [Inject]
    private IUserShiftService uService { get; set; }

    [Inject]
    private ICategoryService cService { get; set; }

    protected override async Task OnInitializedAsync()
    {
        userId = await sessionStorage.GetItemAsync<int>("userId");
        if (userId == 0)
        {
            NavigationManager.NavigateTo($"/");
        }

        try
        {
            shiftList = (await mService.getShifts()).ToArray();

            selectedSortDictionary = new Dictionary<string, Action>
            {
                ["priority"] = () => shiftList = shiftList.OrderBy(s => s.priority ? 0 : 1).ToArray(),
                ["pladser"] = () => shiftList = shiftList.OrderByDescending(s => s.spots).ToArray(),
                ["tidspunkt"] = () => shiftList = shiftList.OrderBy(s => s.startDateTime).ToArray()
            };

            var shifts = await mService.getShifts();

            shiftList = shifts.ToArray();

            // Fang de forskellige shift categories
            catList = shifts.Select(s => s.category).Distinct().ToArray();

            catList = (await cService.getCategories()).ToArray();

        }
        catch (Exception ex)
        {
            Console.WriteLine(ex);
        }
    }

    private ShiftDTO shift = new ShiftDTO();

    private UserShiftDTO userShift = new UserShiftDTO();

    private ShiftCategoryDTO category = new ShiftCategoryDTO();

    private EditContext aEditContext;

    protected override void OnInitialized()
    {
        aEditContext = new EditContext(shift);
        aEditContext = new EditContext(userShift);
        aEditContext = new EditContext(category);
    }

    private async Task RemoveShift(ShiftDTO id)
    {
        await uService.RemoveUserShift(id);
        await mService.RemoveShift(id);

        //Sørger for at genindlæse UI'en så vagt listen opdateres med det samme.
        shiftList = (await mService.getShifts()).ToArray();
        StateHasChanged();
    }
}