@page "/shifts"
@using Client.Services;
@inject HttpClient Http;
@inject NavigationManager NavigationManager
@inject Blazored.SessionStorage.ISessionStorageService sessionStorage;


<div class="table-header">Vagtliste</div>

<label>Sorter efter: </label>
        <select @bind="SelectedSort" class="category">
            <option value="priority">Prioritet</option>
            <option value="pladser">Antal pladser tilbage</option>
            <option value="tidspunkt">Næstkommende vagter</option>
</select>

    <table class="styled-table">
        <thead>
            <tr>
                <th>Kategori</th>
                <th>Område</th>
                <th>Beskrivelse</th>
                <th>Start Tidspunkt</th>
                <th>Slut Tidspunkt</th>
                <th>Timer</th>
                <th>Prioritet</th>
                <th>Pladser</th>
                <th></th>
                <th></th>
            </tr>
        </thead>
        <tbody>
            @foreach (var shift in shiftList)
            {
                <!-- Finder den tilsvarende kategori for den aktuelle vagt baseret på kategori-id-->
                var category = catList.FirstOrDefault(c => c.category_id == shift.category_id);
                if (category != null)
                {
                    if (shift.IsEditing)
                    {
                        <tr>
                            <td>@category.categoryName</td>
                            <td>@category.area</td>
                            <td>@category.description</td>
                            <td><input type="datetime" class="form-control" placeholder="start dato tid" @bind="@shift.startDateTime" /></td>
                            <td><input type="datetime" class="form-control" placeholder="slut dato tid" @bind="@shift.startDateTime" /></td>
                            <td><input type="number" class="form-control" placeholder="længde" @bind="@shift.duration" /></td>
                            <td><input type="checkbox" class="checkbox" placeholder="prioritet" @bind="@shift.priority" style="width: 20px; height: 20px;" /></td>
                            <td><input type="number" class="form-control" placeholder="pladser" @bind="@shift.spots" /></td>
                            <td>
                                <button type="button" class="btn btn-link" @onclick="() => DisableEditMode(shift)"><span class="oi oi-circle-x"></span></button>
                            </td>
                            <td>
                                <button type="button" class="btn btn-link" @onclick="() => UpdateShift(shift)"><span class="oi oi-circle-check"></span></button>
                            </td>
                        </tr>
                    }
                    else
                    {
                    <tr>
                        <td>@category.categoryName</td>
                        <td>@category.area</td>
                        <td>@category.description</td>
                        <td>@shift.startDateTime</td>
                        <td>@shift.endDateTime</td>
                        <td>@shift.duration timer</td>
                        <td>@shift.priority</td>
                        <td>@shift.spots</td>
                        <td>
                        <button type="button" class="btn btn-link" @onclick="() => EnableEditing(shift)"><span class="oi oi-pencil"></span></button>
                        </td>
                        <td>
                        <button type="button" class="btn btn-link" @onclick="() => RemoveShift(shift)"><span class="oi oi-trash"></span></button>
                        </td>
                    </tr>
                    }
                }
            }
        </tbody>
    </table>

    @code {


        private void EnableEditing(ShiftDTO shift)
        {
            shift.IsEditing = true;
        }

        private async Task UpdateShift(ShiftDTO shift)
        {
            //call the repository to update the instance here.
            //show toast after done.
            // Gem ændringer på serveren
            await mService.UpdateShift(shift);

            shift.IsEditing = false;
        }

        ShiftDTO originalShiftItem = new ShiftDTO();

        private void DisableEditMode(ShiftDTO shift)
        {
            //Deaktiver redigeringsmode
            shift.IsEditing = false;

            //Nulstil brugeroplysninger til oprindelige værdier
            shift.startDateTime = originalShiftItem.startDateTime;
            shift.endDateTime = originalShiftItem.endDateTime;
            shift.duration = originalShiftItem.duration;
            shift.priority = originalShiftItem.priority;
            shift.spots = originalShiftItem.spots;
        }

        //Gem sorteringsmetode
        private string selectedSort;

        public string SelectedSort
        {
            // Returner den aktuelle værdi af SelectedSort
            get { return selectedSort; }
            set
            {
                // Opdater værdien af SelectedSort med ny tildelt værdi
                selectedSort = value;
                //Kalder en handling i selectedSortDictionary, der svarer til den valgte sortering
                selectedSortDictionary[selectedSort]();
            }
        }

        //Dictionary til at mappe sorteringsmetoder til handlinger
        Dictionary<string, Action> selectedSortDictionary;

        //Gem brugerens id
        public int userId { get; set; }

        //Array-variabler til at opbevare vagtoplysninger og -kategorier
        private ShiftDTO[]? shiftList = new ShiftDTO[0];
        private ShiftCategoryDTO[]? catList = new ShiftCategoryDTO[0];

        //Tjenester til vores services
        [Inject]
        private IShiftService mService { get; set; }
        [Inject]
        private IUserShiftService uService { get; set; }
        [Inject]
        private ICategoryService cService { get; set; }


        protected override async Task OnInitializedAsync()
        {
            //Hent brugerens id fra session storage
            userId = await sessionStorage.GetItemAsync<int>("userId");
            if (userId == 0)
            {
                // Hvis bruger_id er 0, naviger til startsiden
                NavigationManager.NavigateTo($"/");
            }

            try
            {
                //Hent vagtliste fra ShiftService og gem i shiftList
                shiftList = (await mService.getShifts()).ToArray();

                // Initialiser vores dictionary med sorteringsmetoder og tilhørende handlinger
                selectedSortDictionary = new Dictionary<string, Action>
                {
                    //Sorter vagter efter prioritet, antal pladser tilbage og næstkommende starttidspunkt
                    ["priority"] = () => shiftList = shiftList.OrderBy(s => s.priority ? 0 : 1).ToArray(),
                    ["pladser"] = () => shiftList = shiftList.OrderByDescending(s => s.spots).ToArray(),
                    ["tidspunkt"] = () => shiftList = shiftList.OrderBy(s => s.startDateTime).ToArray()
                };

                // Hent vagter fra ShiftService
                var shifts = await mService.getShifts();

                // Konverter vagt til array og gem i shiftList
                shiftList = shifts.ToArray();

                // Udtræk unikke vagtkategorier og gem i catList
                //catList = shifts.Select(s => s.category).Distinct().ToArray();

                // Hent vagtkategorier fra CategoryService og gem i catList
                catList = (await cService.getCategories()).ToArray();

            }
            catch (Exception ex)
            {
                Console.WriteLine(ex);
            }
        }

        //Variabler til at opbevare vagt-, brugervagt og vagtkategorioplysninger
        private ShiftDTO shift = new ShiftDTO();
        private UserShiftDTO userShift = new UserShiftDTO();
        private ShiftCategoryDTO category = new ShiftCategoryDTO();

        //EditContext-objekt til validering af formularfelter
        private EditContext aEditContext;


        protected override void OnInitialized()
        {
            aEditContext = new EditContext(shift);
            aEditContext = new EditContext(userShift);
            aEditContext = new EditContext(category);
        }

        private async Task RemoveShift(ShiftDTO id)
        {
            //Fjern brugerens tilknytning til vagten og selve vagten
            await uService.RemoveUserShift(id);
            await mService.RemoveShift(id);

            //Sørger for at genindlæse UI'en så vagt listen opdateres med det samme
            shiftList = (await mService.getShifts()).ToArray();
            StateHasChanged();
        }
    }
