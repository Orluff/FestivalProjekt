@page "/usershifts"
@using Client.Services;
@inject HttpClient Http;
@inject NavigationManager NavigationManager
@inject Blazored.SessionStorage.ISessionStorageService sessionStorage;

<div class="table-header">Min vagtplan</div>

<!-- Tabel med vagtoplysninger -->
<table class="styled-table">
    <thead>
        <tr>
            <th>Kategori</th>
            <th>Start Tidspunkt</th>
            <th>Slut Tidspunkt</th>
            <th>Timer</th>
            <th>Beskrivelse</th>
            <th>Afmeld Vagt</th>
        </tr>
    </thead>

    <tbody>
        <!-- Loop gennem brugervagter og vis vagt oplysningerne i hver række -->
        @foreach (var user in userShiftList)
            {
                @if (user.user_id == userId)
                    {
                        @foreach (var shift in shiftList)
                            {
                                @if (user.shift_id == shift.shift_id)
                                    {
                                        <!-- Hent kategorien for den pågældende vagt -->
                                        var category = catList.FirstOrDefault(c => c.category_id == shift.category_id);

                                        if (category != null)
                                        {
                                            <tr>
                                                <td>@category.categoryName</td>
                                                <td>@shift.startDateTime</td>
                                                <td>@shift.endDateTime</td>
                                                <td>@shift.duration</td>
                                                <td>@category.description</td>

                                                <!-- Hvis vagten starter om 48 timer eller mindre, kan den ikke længere fravælges-->
                                                @if (shift.startDateTime! < DateTime.Now.AddHours(48))
                                                    {
                                                        <td></td>
                                                    }
                                                else
                                                    {
                                                        <td><button type="button" class="btn btn-link" @onclick="() => RemoveUserShift(shift)"><span class="oi oi-x"></span></button></td>
                                                    }
                                            </tr>
                                        }
                                    }
                             }
                    }
             }
    </tbody>
</table>

@code {

    //Gem brugerens id
    public int userId { get; set; }

    //Arrays af DTO-objekter, der kan være null
    private ShiftDTO[]? shiftList = new ShiftDTO[0];
    private UserShiftDTO[]? userShiftList = new UserShiftDTO[0];
    private ShiftCategoryDTO[]? catList = new ShiftCategoryDTO[0];

    //Egenskaber
    private ShiftDTO shift = new ShiftDTO();
    private UserShiftDTO userShift = new UserShiftDTO();
    private ShiftCategoryDTO category = new ShiftCategoryDTO();

    //Tjenester til vores services
    [Inject]
    private IShiftService mService { get; set; }
    [Inject]
    private IUserShiftService uService { get; set; }
    [Inject]
    private ICategoryService cService { get; set; }

    protected override async Task OnInitializedAsync()
    {
        // Indlæs bruger-id fra session storage
        userId = await sessionStorage.GetItemAsync<int>("userId");
        if (userId == 0)
        {
            //Er bruger-id ikke tilgængeligt, omdiriger til forsiden
            NavigationManager.NavigateTo($"/");
        }

        try
        {
            // Hent vagt-, brugervagt- og kategorilisterne fra serveren
            shiftList = (await mService.getShifts()).ToArray();
            userShiftList = (await uService.GetUserShifts()).ToArray();
            catList = (await cService.getCategories()).ToArray();
        }
        catch (Exception ex)
        {
            Console.WriteLine(ex);
        }
    }

    private EditContext aEditContext;

    protected override void OnInitialized()
    {
        aEditContext = new EditContext(shift);
        aEditContext = new EditContext(userShift);
        aEditContext = new EditContext(category);
    }

    private async Task RemoveUserShift(ShiftDTO shift)
    {
        await uService.RemoveUserShift(shift);
        await mService.AddSpot(shift);

        //Sørger for at genindlæse UI'en så vagt listen opdateres med det samme
        userShiftList = (await uService.GetUserShifts()).ToArray();
        StateHasChanged();
    }
}