@page "/userinfo"
@using Client.Services;
@inject NavigationManager NavigationManager
@inject Blazored.SessionStorage.ISessionStorageService sessionStorage;

<h1 class="mb-3 mt-3">Mine oplysninger:</h1>

@if (userItem != null)
{
    <!-- Brugeroplysninger form -->
    <div class="col-md-3 mb-3">
        <label for="name">Fornavn:</label>
        <div class="input-group">
            <InputText id="name" @bind-Value="userItem.name" class="form-control" disabled="@(!isEditMode)" />
        </div>
    </div>

    <div class="col-md-3 mb-3">
        <label for="lastName">Efternavn:</label>
        <div class="input-group">
            <InputText id="lastName" @bind-Value="userItem.lastName" class="form-control" disabled="@(!isEditMode)" />
        </div>
    </div>

    <div class="col-md-3 mb-3">
        <label for="address">Adresse:</label>
        <div class="input-group">
            <InputText id="address" @bind-Value="userItem.address" class="form-control" disabled="@(!isEditMode)" />
        </div>
    </div>

    <div class="col-md-3 mb-3">
        <label for="email">Email:</label>
        <div class="input-group">
            <InputText id="email" @bind-Value="userItem.email" class="form-control" disabled="@(!isEditMode)" />
        </div>
    </div>

    <div class="col-md-3 mb-3">
        <label for="telephone">Telefonnummer:</label>
        <div class="input-group">
            <InputText id="telephone" @bind-Value="userItem.telephone" class="form-control" disabled="@(!isEditMode)" />
        </div>
    </div>

    <div class="col-md-3 mb-3">
        <label for="birthDate">Fødselsdato:</label>
        <div class="input-group">
            <InputDate id="birthDate" @bind-Value="userItem.birthDate" class="form-control" disabled="@(!isEditMode)" />
        </div>
    </div>

    <div class="col-md-6 mb-3">
        <label for="role_id" >Rolle: </label>
        <InputSelect id="role_id"  @bind-Value="@userItem.role_id" disabled="@(!isEditMode)">
            <!-- Itererer gennem roleList for at generere option-elementer -->
            @foreach (var role in roleList)
            {
                <!-- Hver rolle repræsenteres som en option med værdien af role_id -->
                <option value="@role.role_id">@role.roleName</option>
            }
        </InputSelect>
    </div>

    <div class="col-md-3 mb-3">
        <label for="password">Password:</label>
        <div class="input-group">
            <InputText id="password" @bind-Value="userItem.password" type="password" class="form-control" disabled="@(!isEditMode)" />
        </div>
    </div>

    <div class="col-md-12 mb-3">
        <div class="input-group">
            @if (!isEditMode)
            {
                <!-- Redigeringsknappen vises, når brugeren ikke er i redigeringsmode -->
                <button class="btn btn-primary" @onclick="EnableEditMode">Edit</button>
            }
            else
            {
                <!-- Knapper til at gemme ændringer eller annullere redigeringen -->
                <button class="btn btn-success" @onclick="SaveChanges">Save</button>
                <button class="btn btn-secondary" @onclick="DisableEditMode">Cancel</button>
            }
        </div>
    </div>
}
else
{

    <p>Brugeroplysninger blev ikke fundet.</p>
}
@code {

    //Gem brugerens id
    public int userId { get; set; }

    //Tjeneste til vores service
    [Inject]
    private IUserService mService { get; set; }
    [Inject]
    private IRoleService rService { get; set; }

    //Egenskaber
    private UserDTO userItem;
    private bool isEditMode = false;
    private UserDTO originalUserItem;
    private RoleDTO[]? roleList = new RoleDTO[0];
    private RoleDTO roleItem = new RoleDTO();


    protected override async Task OnInitializedAsync()
    {
        // Indlæs bruger-id fra session storage
        userId = await sessionStorage.GetItemAsync<int>("userId");
        if (userId == 0)
        {
            //Er bruger-id ikke tilgængeligt, omdiriger til forsiden
            NavigationManager.NavigateTo($"/");
        }

        try
        {
            await LoadUserData();
            roleList = (await rService.getRole()).ToArray();
        }
        catch (Exception ex)
        {
            Console.WriteLine(ex);
        }
    }

    private async Task LoadUserData()
    {
        // Hent brugeroplysninger fra serveren baseret på bruger-id'et
        userItem = await mService.GetUserById(userId);
        originalUserItem = new UserDTO
        {
            // Gem de oprindelige brugeroplysninger hvis redigering annulleres
            name = userItem.name,
            lastName = userItem.lastName,
            address = userItem.address,
            email = userItem.email,
            telephone = userItem.telephone,
            birthDate = userItem.birthDate,
            role_id = userItem.role_id,
            password = userItem.password
        };
    }

    private void EnableEditMode()
    {
        // Aktiver redigeringsmode
        isEditMode = true;
    }

    private void DisableEditMode()
    {
        //Deaktiver redigeringsmode
        isEditMode = false;

        //Nulstil brugeroplysninger til oprindelige værdier
        userItem.name = originalUserItem.name;
        userItem.lastName = originalUserItem.lastName;
        userItem.address = originalUserItem.address;
        userItem.email = originalUserItem.email;
        userItem.telephone = originalUserItem.telephone;
        userItem.birthDate = originalUserItem.birthDate;
        userItem.role_id = originalUserItem.role_id;
        userItem.password = originalUserItem.password;
    }

    private async Task SaveChanges()
    {
        // Gem ændringer på serveren
        await mService.UpdateUser(userItem);

        isEditMode = false;
    }
}